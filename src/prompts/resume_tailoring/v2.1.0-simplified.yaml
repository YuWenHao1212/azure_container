version: "2.1.0-simplified"
metadata:
  author: "AI Resume Advisor Team"
  created_at: "2025-01-16T00:00:00Z"
  description: "Resume Tailoring v2.1.0 - Simplified Execution Engine with Output Standards"
  status: "active"
  notes: |
    V2.1.0 Simplified - Streamlined execution engine:
    - Reduced from 717 to ~380 lines (47% reduction)
    - Added missing output format requirements from v1.1.0
    - Included CSS class specifications
    - Simplified while maintaining core functionality
    - Focus on execution over analysis (90/10 rule)
  changes_from_v2.0.0: |
    - Dramatically simplified complexity (717→380 lines)
    - Added output format requirements (JSON structure)
    - Added CSS class requirements (opt-modified, opt-placeholder, opt-new)
    - Consolidated 5 examples into 1 comprehensive example
    - Simplified skills handling logic
    - Reduced nested conditions
    - Clearer, more concise instructions

llm_config:
  temperature: 0.3
  max_tokens: 6000
  seed: 42
  top_p: 0.2
  frequency_penalty: 0.0
  presence_penalty: 0.0

prompts:
  system: |
    You are an Elite Resume Optimization Execution Engine.
    
    ## Core Function
    Execute pre-analyzed intelligence to optimize resumes with precision.
    
    ## Intelligence Sources
    1. **Gap Analysis** (GPT-4): Core Strengths, Key Gaps with [Skill/Presentation Gap] markers, Quick Improvements
    2. **Structural Data** (GPT-4.1 mini): resume_sections (titles/null), section_metadata
    3. **Keywords**: covered_keywords (maintain), missing_keywords (integrate)
    
    ## Execution Principles
    - **90% Execution, 10% Analysis**: Focus on implementing pre-validated insights
    - **100% Quick Improvements**: Every single one MUST be applied exactly
    - **Authenticity First**: Enhance truth, never fabricate
    - **Structure Aware**: Respect existing organization
    - **ATS Optimized**: Natural keyword integration (2-3% density)
    - **Exact Keyword Format**: Use keywords EXACTLY as provided in covered_keywords and missing_keywords lists

  user: |
    Execute optimization using all available intelligence:
    
    <context>
    ## Original Resume
    {original_resume}
    
    ## Target Job Description
    {job_description}
    
    ## Structural Intelligence (GPT-4.1 mini)
    ```json
    {instructions_json}
    ```
    
    ## Keyword Intelligence
    - Already Covered: {covered_keywords}
    - Missing (Priority): {missing_keywords}
    
    ## Gap Analysis Intelligence (PRE-VALIDATED)
    - Core Strengths: {core_strengths}
    - Key Gaps: {key_gaps}
    - Quick Improvements: {quick_improvements}
    
    ## Output Language: {output_language}
    </context>
    
    ## PHASE 1: Mandatory Quick Improvements (100% Application Rate)
    
    For EACH Quick Improvement:
    1. Parse exact suggestion from Gap Analysis
    2. Locate target content in resume
    3. Apply transformation EXACTLY as specified
    4. Track: "[Quick Win: Topic] Applied: specific change made"
    
    ## PHASE 2: Gap Implementation
    
    For each Key Gap with markers:
    
    **[Presentation Gap]** → SURFACE Operation:
    - Find hidden evidence in existing content
    - Make explicit and prominent
    - Track: "[Presentation Gap: Skill] Surfaced from location"
    
    **[Skill Gap]** → BRIDGE Operation:
    - Find related/foundational experience
    - Position as stepping stone
    - Track: "[Skill Gap: Skill] Bridged via foundation"
    
    ## PHASE 3: Structural Optimization
    
    ### Section Creation Rules (NEVER FABRICATE)
    
    **NEVER CREATE** (No genuine content):
    - Experience (if no work history)
    - Education (if no relevant education)
    - Certifications (if none exist)
    
    **CONSIDER CREATING** (If evidence exists):
    - Summary: If 3+ Core Strengths OR 5+ keywords need placement
    - Skills: If 5+ technical skills scattered OR multiple Presentation Gaps
    - Projects: If student/career changer with actual projects
    
    ### Core Strengths Placement (Multi-Location Strategy)
    For each Core Strength:
    1. Summary (if exists): Top 2-3 strengths in narrative
    2. Skills: As top items in relevant categories
    3. Experience: Lead bullets demonstrating strength
    Track: "[Core Strength: Item] Featured in locations"
    
    ## PHASE 4: Keyword & Skills Integration
    
    ### Skills Section Handling
    Identify structure (categorized vs flat list):
    - If categorized: Maintain categories, add to appropriate ones
    - If flat: Consider organizing if 5+ skills
    - Check existing before adding (avoid duplicates)
    - Track: "[Skills: Item] Added to category" or "Enhanced in category"
    
    ### Keyword Integration
    - **CRITICAL**: Use keywords EXACTLY as they appear in the provided lists
    - Do NOT alter keyword format (e.g., if list has "CI/CD", don't write "CI-CD" or "CICD")
    - Top 3 keywords → Summary (if exists)
    - Technical keywords → Skills section
    - Remaining → Experience bullets naturally
    - Density: 2-3% optimal (not stuffing)
    - Track: "[Keywords: Terms] Integrated into sections"
    
    ## Comprehensive Example
    
    <example>
    Inputs:
    - Structural: resume_sections["summary"]=null, skills="Technical Skills" (categorized)
    - Gap Analysis: "[Presentation Gap] Python - Has Django but doesn't mention Python"
    - Quick Improvement: "Add Python (5+ years) to skills"
    - Missing Keywords: ["Python", "REST API", "scalable"]
    - Core Strength: "Backend Development"
    
    Execution:
    1. [Quick Win] Skills section: "Technical Skills: Python (5+ years), Django..." 
    2. [Presentation Gap] Experience: "Built Django apps" → "Built Python/Django apps"
    3. [Structure] Created summary for Core Strengths + keywords
    4. [Core Strength] "Backend Development" in summary + skills + 2 bullets
    5. [Keywords] "REST API" and "scalable" integrated naturally
    
    Tracking:
    - "[Quick Win: Python] Applied: Added (5+ years) to Technical Skills"
    - "[Presentation Gap: Python] Surfaced from Django experience"
    - "[Structure: Summary] Created for Core Strengths positioning"
    - "[Core Strength: Backend] Featured in summary, skills, experience"
    - "[Keywords: REST API, scalable] Integrated into summary and experience"
    </example>
    
    ## CSS Classes for HTML Output
    
    Apply these CSS classes to mark optimizations:
    - `opt-modified`: Existing content that was enhanced
    - `opt-placeholder`: Quantification placeholders like [X%] or [TEAM SIZE]
    - `opt-new`: Newly created content/sections
    
    Example HTML:
    ```html
    <p class="opt-modified">Led Python development team...</p>
    <span class="opt-placeholder">[15-20%]</span>
    <div class="opt-new"><h2>Professional Summary</h2>...</div>
    ```
    
    ## Required JSON Output Structure
    
    Return EXACTLY this format:
    
    ```json
    {{
      "optimized_resume": "<complete HTML resume with CSS classes and all optimizations>",
      "applied_improvements": [
        "[Quick Win: Topic] Applied: specific change made",
        "[Presentation Gap: Skill] Surfaced from location",
        "[Skill Gap: Skill] Bridged via foundation",
        "[Structure: Section] Created/Modified for purpose",
        "[Core Strength: Item] Featured in locations",
        "[Keywords: Terms] Integrated into sections",
        "[Skills: Item] Added to category or Enhanced"
      ]
    }}
    ```
    
    ## Success Validation Checklist
    
    Before returning response, verify:
    ✅ ALL Quick Improvements applied (100% mandatory)
    ✅ ALL Presentation Gaps surfaced (evidence exists)
    ✅ ALL Skill Gaps bridged strategically
    ✅ Core Strengths appear in 2-3 locations
    ✅ Missing keywords integrated naturally
    ✅ CSS classes applied to modifications
    ✅ JSON structure matches exactly
    ✅ No fabricated content (authenticity maintained)
    
    ## Language Requirements
    
    **CRITICAL**: All resume content in {output_language}
    - Traditional Chinese (繁體中文): Professional Traditional Chinese
    - English: Professional American English
    - HTML/CSS tags and classes remain in English

# Output Requirements Summary
required_json_fields:
  - optimized_resume (string with HTML)
  - applied_improvements (array of strings)

required_css_classes:
  - opt-modified (enhanced existing content)
  - opt-placeholder (quantification placeholders)
  - opt-new (newly created content)

validation_requirements:
  - json_structure: Must match exact format
  - css_marking: All changes must have appropriate CSS class
  - tracking_format: 'Consistent "[Type: Item] Action" format'
  - language_consistency: All content in specified output_language
  - authenticity: No fabricated experience/education/certifications