name: CI/CD Pipeline - Main

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # 允許手動觸發

env:
  REGISTRY: airesumeadvisorregistry.azurecr.io
  IMAGE_NAME: airesumeadvisor-api
  CONTAINER_APP_NAME: airesumeadvisor-api-production
  RESOURCE_GROUP: airesumeadvisorfastapi

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11.8'
        
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create .env file for tests
      run: |
        cat > .env << EOF
        ENVIRONMENT=development
        LOG_LEVEL=INFO
        MONITORING_ENABLED=false
        LIGHTWEIGHT_MONITORING=true
        
        # Azure OpenAI
        AZURE_OPENAI_ENDPOINT=${{ secrets.AZURE_OPENAI_ENDPOINT }}
        AZURE_OPENAI_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }}
        AZURE_OPENAI_API_VERSION=2025-01-01-preview
        AZURE_OPENAI_GPT4_DEPLOYMENT=gpt-4.1-japan
        GPT41_MINI_JAPANEAST_DEPLOYMENT=gpt-4-1-mini-japaneast
        GPT41_MINI_JAPANEAST_ENDPOINT=${{ secrets.AZURE_OPENAI_ENDPOINT }}
        GPT41_MINI_JAPANEAST_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }}
        GPT41_MINI_JAPANEAST_API_VERSION=2025-01-01-preview
        
        # Embedding Services
        EMBEDDING_ENDPOINT=${{ secrets.EMBEDDING_ENDPOINT }}
        EMBEDDING_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }}
        COURSE_EMBEDDING_ENDPOINT=${{ secrets.COURSE_EMBEDDING_ENDPOINT }}
        COURSE_EMBEDDING_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }}
        
        # Model Selection
        LLM_MODEL_KEYWORDS=gpt41-mini
        LLM_MODEL_GAP_ANALYSIS=gpt-4.1
        LLM_MODEL_RESUME_FORMAT=gpt-4.1
        LLM_MODEL_RESUME_TAILOR=gpt-4.1
        
        # Security
        JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
        CONTAINER_APP_API_KEY=${{ secrets.CONTAINER_APP_API_KEY }}
        
        # CORS
        CORS_ORIGINS=https://airesumeadvisor.com,https://airesumeadvisor.bubbleapps.io,https://www.airesumeadvisor.com
        
        # Language Detection
        USE_RULE_BASED_DETECTOR=true
        EOF
        
    - name: Run tests
      env:
        CI: 'true'  # Ensure CI environment variable is set
      run: |
        # 安裝測試依賴（包含 Ruff）
        pip install pytest pytest-json-report ruff
        
        # 確保測試腳本有執行權限
        chmod +x test/scripts/pre_commit_check_advanced.py
        chmod +x .claude/hooks/pre-commit-check.sh
        
        # Debug CI environment
        echo "=== Debug CI Environment ==="
        python test/scripts/debug_ci_env.py || true
        echo ""
        
        # 執行完整測試套件 (包含所有測試) - 使用 Python 版本
        echo "=== Running complete test suite with Python pre-commit check ==="
        echo "This includes:"
        echo "  - Ruff code style check (src/ and test/ directories)"
        echo "  - Service modules tests (47 tests)"
        echo "  - Error Handler System tests (30 tests)"
        echo "  - Health & Keyword tests (16 tests)"
        echo "  - Index Calculation tests (20 tests)"
        echo "  - Gap Analysis tests (44 tests)"
        echo "  - Resume Tailoring tests (16 tests)"
        echo "Total: 174 tests + Ruff check"
        echo ""
        echo "📌 CI Mode: Using optimized test delays for faster execution"
        echo ""
        
        # 優先使用 Python 版本
        if [ -f "test/scripts/pre_commit_check_advanced.py" ]; then
            # 執行測試並同時寫入日誌，保留退出碼
            python test/scripts/pre_commit_check_advanced.py | tee test_output.log
            # 捕獲 Python 腳本的退出碼 (PIPESTATUS[0] 是管道中第一個命令的退出碼)
            TEST_EXIT_CODE=${PIPESTATUS[0]}
            
            # 如果測試失敗，明確退出
            if [ $TEST_EXIT_CODE -ne 0 ]; then
                echo ""
                echo "❌ Tests failed with exit code: $TEST_EXIT_CODE"
                echo "Pipeline will be blocked."
                exit $TEST_EXIT_CODE
            fi
        else
            # Fallback to shell version
            set -o pipefail
            ./.claude/hooks/pre-commit-check.sh | tee test_output.log
            TEST_EXIT_CODE=$?
            
            if [ $TEST_EXIT_CODE -ne 0 ]; then
                echo ""
                echo "❌ Tests failed with exit code: $TEST_EXIT_CODE"
                echo "Pipeline will be blocked."
                exit $TEST_EXIT_CODE
            fi
        fi
        
        echo ""
        echo "✅ All tests passed successfully!"
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          test/reports/
          test_output.log
          
  build-and-push:
    name: Build and Push Docker Image
    needs: test
    runs-on: ubuntu-latest
    
    outputs:
      image-tag: ${{ steps.extract-tag.outputs.tag }}
      image-digest: ${{ steps.build.outputs.digest }}
      image-with-tag: ${{ steps.extract-tag.outputs.full-image }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
        
    - name: Generate metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=latest
          type=raw,value={{date 'YYYYMMDD-HHmmss'}}-{{sha}}
          type=sha,prefix={{date 'YYYYMMDD'}}-
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
        cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
        
    - name: Extract image tag for deployment
      id: extract-tag
      run: |
        # 從 metadata tags 中提取帶時間戳的標籤
        TAGS="${{ steps.meta.outputs.tags }}"
        
        # 尋找包含時間戳格式的標籤 (YYYYMMDD-HHmmss-sha)
        TIMESTAMP_TAG=""
        while IFS= read -r tag; do
          # 提取標籤部分（去除 registry 和 image name）
          TAG_ONLY=$(echo "$tag" | sed "s|^${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:||")
          if echo "$TAG_ONLY" | grep -qE '^[0-9]{8}-[0-9]{6}-[a-f0-9]+$'; then
            TIMESTAMP_TAG="$TAG_ONLY"
            break
          fi
        done <<< "$TAGS"
        
        if [ -z "$TIMESTAMP_TAG" ]; then
          echo "Error: Could not find timestamp tag"
          exit 1
        fi
        
        FULL_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${TIMESTAMP_TAG}"
        
        # 設置 outputs
        echo "tag=$TIMESTAMP_TAG" >> $GITHUB_OUTPUT
        echo "full-image=$FULL_IMAGE" >> $GITHUB_OUTPUT
        
        echo "Using image: $FULL_IMAGE"
        
  deploy:
    name: Deploy to Azure Container Apps
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }
        
    - name: Get current revision for backup
      id: backup
      run: |
        CURRENT_REVISION=$(az containerapp show \
          --name ${{ env.CONTAINER_APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --query "properties.latestRevisionName" -o tsv)
        echo "current-revision=$CURRENT_REVISION" >> $GITHUB_OUTPUT
        
    - name: Detect prompt versions
      id: prompt-versions
      run: |
        echo "🔍 Detecting active prompt versions..."
        
        # Function to find ALL active versions for a task (including multi-language)
        find_active_versions() {
          local task=$1
          local dir="src/prompts/$task"
          local versions=""
          
          if [ ! -d "$dir" ]; then
            echo ""
            return
          fi
          
          # Look for ALL files with status: active in metadata
          for file in $dir/v*.yaml; do
            if [ -f "$file" ]; then
              if grep -qE 'status:\s*["'\'']?active["'\'']?' "$file" 2>/dev/null; then
                # Extract version from filename
                local version=$(basename "$file" .yaml | sed 's/^v//')
                if [ -z "$versions" ]; then
                  versions="$version"
                else
                  versions="$versions,$version"
                fi
              fi
            fi
          done
          
          echo "$versions"
        }
        
        # Find first active version (for backward compatibility)
        find_active_version() {
          local versions=$(find_active_versions "$1")
          echo "$versions" | cut -d',' -f1
        }
        
        # Detect versions for each task
        GAP_VERSION=$(find_active_version "gap_analysis")
        KEYWORD_VERSION=$(find_active_version "keyword_extraction")
        INDEX_VERSION=$(find_active_version "index_calculation")
        FORMAT_VERSION=$(find_active_version "resume_format")
        TAILOR_VERSION=$(find_active_version "resume_tailor")
        # Add resume structure analyzer (instruction_compiler directory)
        STRUCTURE_VERSION=$(find_active_version "instruction_compiler")
        
        # Set outputs
        echo "gap-analysis-version=${GAP_VERSION:-2.1.8}" >> $GITHUB_OUTPUT
        echo "keyword-extraction-version=${KEYWORD_VERSION:-latest}" >> $GITHUB_OUTPUT
        echo "index-calculation-version=${INDEX_VERSION:-latest}" >> $GITHUB_OUTPUT
        echo "resume-format-version=${FORMAT_VERSION:-latest}" >> $GITHUB_OUTPUT
        echo "resume-tailor-version=${TAILOR_VERSION:-latest}" >> $GITHUB_OUTPUT
        echo "resume-structure-version=${STRUCTURE_VERSION:-v1.0.1}" >> $GITHUB_OUTPUT
        
        # Log detected versions (including multi-language)
        echo "Detected prompt versions:"
        echo "  - Gap Analysis: ${GAP_VERSION:-2.1.8}"
        echo "  - Keyword Extraction: $(find_active_versions 'keyword_extraction' || echo 'latest')"
        echo "  - Index Calculation: ${INDEX_VERSION:-latest}"
        echo "  - Resume Format: $(find_active_versions 'resume_format' || echo 'latest')"
        echo "  - Resume Tailor: ${TAILOR_VERSION:-latest}"
        echo "  - Resume Structure: ${STRUCTURE_VERSION:-v1.0.1}"
        
    - name: Deploy to Container App
      run: |
        # 使用 build job 輸出的映像
        FULL_IMAGE="${{ needs.build-and-push.outputs.image-with-tag }}"
        
        # 如果 image-with-tag 為空，嘗試從 image-tag 構建
        if [ -z "$FULL_IMAGE" ]; then
          echo "Warning: image-with-tag is empty, trying to construct from image-tag"
          # 從 image-tag 中找到時間戳標籤
          TAGS="${{ needs.build-and-push.outputs.image-tag }}"
          TIMESTAMP_TAG=$(echo "$TAGS" | grep -oE '[0-9]{8}-[0-9]{6}-[a-f0-9]+' | head -1)
          if [ -n "$TIMESTAMP_TAG" ]; then
            FULL_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${TIMESTAMP_TAG}"
          else
            echo "Error: Could not construct image tag"
            exit 1
          fi
        fi
        
        echo "Deploying image: $FULL_IMAGE"
        
        # 再次檢查確保有映像
        if [ -z "$FULL_IMAGE" ]; then
          echo "Error: No image specified for deployment"
          exit 1
        fi
        
        # 更新 Container App
        az containerapp update \
          --name ${{ env.CONTAINER_APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --image "$FULL_IMAGE" \
          --revision-suffix $(date +%Y%m%d%H%M%S) \
          --set-env-vars \
            ENVIRONMENT=production \
            LOG_LEVEL=INFO \
            MONITORING_ENABLED=false \
            LIGHTWEIGHT_MONITORING=true \
            AZURE_OPENAI_ENDPOINT=${{ secrets.AZURE_OPENAI_ENDPOINT }} \
            AZURE_OPENAI_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }} \
            AZURE_OPENAI_API_VERSION=2025-01-01-preview \
            AZURE_OPENAI_GPT4_DEPLOYMENT=gpt-4.1-japan \
            GPT41_MINI_JAPANEAST_DEPLOYMENT=gpt-4-1-mini-japaneast \
            GPT41_MINI_JAPANEAST_ENDPOINT=${{ secrets.AZURE_OPENAI_ENDPOINT }} \
            GPT41_MINI_JAPANEAST_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }} \
            GPT41_MINI_JAPANEAST_API_VERSION=2025-01-01-preview \
            EMBEDDING_ENDPOINT=${{ secrets.EMBEDDING_ENDPOINT }} \
            EMBEDDING_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }} \
            COURSE_EMBEDDING_ENDPOINT=${{ secrets.COURSE_EMBEDDING_ENDPOINT }} \
            COURSE_EMBEDDING_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }} \
            LLM_MODEL_KEYWORDS=gpt-4.1-mini \
            LLM_MODEL_GAP_ANALYSIS=gpt-4.1 \
            LLM_MODEL_RESUME_FORMAT=gpt-4.1 \
            LLM_MODEL_RESUME_TAILOR=gpt-4.1 \
            GAP_ANALYSIS_PROMPT_VERSION="${{ steps.prompt-versions.outputs.gap-analysis-version }}" \
            KEYWORD_EXTRACTION_PROMPT_VERSION="${{ steps.prompt-versions.outputs.keyword-extraction-version }}" \
            INDEX_CALCULATION_PROMPT_VERSION="${{ steps.prompt-versions.outputs.index-calculation-version }}" \
            RESUME_FORMAT_PROMPT_VERSION="${{ steps.prompt-versions.outputs.resume-format-version }}" \
            RESUME_TAILOR_PROMPT_VERSION="${{ steps.prompt-versions.outputs.resume-tailor-version }}" \
            RESUME_STRUCTURE_PROMPT_VERSION="${{ steps.prompt-versions.outputs.resume-structure-version }}" \
            JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
            CONTAINER_APP_API_KEY=${{ secrets.CONTAINER_APP_API_KEY }} \
            CORS_ORIGINS="https://airesumeadvisor.com,https://airesumeadvisor.bubbleapps.io,https://www.airesumeadvisor.com" \
            USE_RULE_BASED_DETECTOR=true
            
    - name: Wait for deployment
      run: |
        echo "Waiting for deployment to fully propagate..."
        sleep 30
        echo "Deployment should be ready now"
      
    - name: Health check
      run: |
        RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://airesumeadvisor-api-production.calmisland-ea7fe91e.japaneast.azurecontainerapps.io/health)
        if [ $RESPONSE -eq 200 ]; then
          echo "Health check passed!"
        else
          echo "Health check failed with status code: $RESPONSE"
          exit 1
        fi
        
    - name: Smoke test with keyword consistency check
      run: |
        # 確保測試腳本有執行權限
        chmod +x test/scripts/ci_smoke_test_v2.sh
        
        # 執行 smoke test v2 (包含關鍵字一致性測試)
        CONTAINER_APP_API_KEY=${{ secrets.CONTAINER_APP_API_KEY }} \
        API_URL=https://airesumeadvisor-api-production.calmisland-ea7fe91e.japaneast.azurecontainerapps.io \
        ./test/scripts/ci_smoke_test_v2.sh
        
  notify:
    name: Notify Deployment Status
    needs: [test, build-and-push, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Create deployment summary
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "## ✅ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "- **App URL**: https://airesumeadvisor-api-production.calmisland-ea7fe91e.japaneast.azurecontainerapps.io" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Time**: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Deployment Validation" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Health check passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Smoke tests passed (Real API Performance)" >> $GITHUB_STEP_SUMMARY
          echo "  - Keyword Extraction: P95 < 4500ms SLA ✅" >> $GITHUB_STEP_SUMMARY
          echo "  - Index Calculation V2: P50 < 1000ms, P95 < 2000ms SLA ✅" >> $GITHUB_STEP_SUMMARY
          echo "  - Gap Analysis V2: P50 < 25000ms SLA ✅" >> $GITHUB_STEP_SUMMARY
          echo "  - Resume Tailoring: Response < 25000ms SLA ✅" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ❌ Deployment Failed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please check the workflow logs for details." >> $GITHUB_STEP_SUMMARY
        fi