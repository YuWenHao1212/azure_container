{
  "$schema": "https://json.schemastore.org/claude-code-settings.json",
  "permissions": {
    "allow": [
      "Bash(az login:*)",
      "Bash(az account set:*)",
      "Bash(az containerapp list:*)",
      "Bash(az containerapp show:*)",
      "Bash(az acr login:*)",
      "Bash(docker pull:*)",
      "Bash(docker create:*)",
      "Bash(docker cp:*)",
      "Bash(docker rm:*)",
      "Bash(cp:*)",
      "Bash(chmod:*)",
      "Bash(./deploy-container-app.sh:*)",
      "Bash(az containerapp env list:*)",
      "Bash(docker build:*)",
      "Bash(docker tag:*)",
      "Bash(docker push:*)",
      "Bash(az containerapp logs show:*)",
      "Bash(uv run:*)",
      "Bash(uv add:*)",
      "Bash(uvx:*)",
      "Bash(mkdir:*)",
      "WebFetch(domain:github.com)",
      "Bash(claude mcp:*)",
      "Bash(env)",
      "Bash(cat:*)",
      "Bash(grep:*)",
      "Bash(find:*)",
      "mcp__serena__initial_instructions",
      "mcp__serena__list_dir",
      "mcp__serena__get_symbols_overview",
      "mcp__serena__find_symbol",
      "mcp__serena__think_about_collected_information",
      "mcp__serena__search_for_pattern",
      "mcp__serena__replace_regex",
      "mcp__serena__think_about_whether_you_are_done",
      "Bash(python test/scripts/check_prompts.py:*)",
      "Bash(./test/scripts/run_level0_tests.sh:*)",
      "mcp__serena__find_file",
      "Bash(./test/scripts/run_style.sh:*)",
      "Bash(ls:*)",
      "Bash(python -m pytest test/unit/test_health.py::TestHealthCheck::test_health_check_success -v)",
      "Bash(python test:*)",
      "Bash(git remote remove:*)",
      "Bash(gh repo create:*)",
      "Bash(awk:*)",
      "Bash(mv:*)",
      "mcp__ide__executeCode",
      "Bash(git commit:*)",
      "Bash(realpath:*)",
      "mcp__serena__get_current_config",
      "mcp__serena__read_file",
      "mcp__serena__activate_project",
      "mcp__serena__onboarding",
      "mcp__serena__execute_shell_command",
      "mcp__serena__write_memory",
      "mcp__serena__list_memories",
      "WebFetch(domain:docs.anthropic.com)",
      "mcp__serena__read_memory",
      "Bash(npx -y @kunihiros/claude-code-mcp list)",
      "mcp__serena__create_text_file",
      "mcp__serena__insert_after_symbol",
      "mcp__serena__insert_at_line",
      "mcp__serena__replace_lines",
      "Bash(python -m pytest test/unit/test_keyword_extraction.py::TestKeywordExtraction::test_extract_keywords_validation_error_short_description -xvs)",
      "Bash(python -m pytest test/integration/test_keyword_extraction_language.py::TestKeywordExtractionLanguageIntegration::test_reject_simplified_chinese -xvs)",
      "Bash(python:*)",
      "mcp__serena__replace_symbol_body",
      "mcp__serena__summarize_changes",
      "mcp__serena__think_about_task_adherence",
      "Bash(./test/scripts/run_complete_test_suite.sh:*)",
      "Bash(ruff check:*)",
      "Bash(bash:*)",
      "mcp__serena__check_onboarding_performed",
      "Bash(pytest:*)",
      "Bash(echo:*)",
      "Bash(rm:*)",
      "Bash(./test/scripts/precommit.sh:*)",
      "Bash(./test/scripts/debug_yaml.sh:*)",
      "Bash(./test/scripts/view_precommit_logs.sh:*)",
      "Bash(git add:*)",
      "mcp__serena__find_referencing_symbols",
      "Bash(for:*)",
      "Bash(do echo \"=== $file ===\")",
      "Bash(jq:*)",
      "Bash(done)",
      "Bash(do jq:*)",
      "Bash(git push:*)",
      "Bash(az acr credential show:*)",
      "Bash(gh secret:*)",
      "Bash(git tag:*)",
      "Bash(./test/scripts/run_index_calculation_v2_performance.sh:*)",
      "mcp__serena__insert_before_symbol",
      "Bash(./test/scripts/run_index_calculation_v2_tests.sh:*)",
      "Bash(git checkout:*)",
      "Bash(source:*)",
      "Bash(./test/scripts/run_gap_analysis_v2_tests.sh:*)",
      "Bash(timeout 30s python -m pytest test/integration/test_gap_analysis_v2_integration_complete.py::TestGapAnalysisV2IntegrationComplete::test_API_GAP_001_IT_api_endpoint_basic_functionality --collect-only)",
      "Bash(timeout 30s python -m pytest:*)",
      "Bash(timeout:*)",
      "Bash(venv/bin/python -m pytest test/integration/test_gap_analysis_v2_integration_complete.py -v --tb=short)",
      "Bash(venv/bin/python -m pytest test/performance/test_gap_analysis_v2_performance.py::TestGapAnalysisV2Performance::test_p50_response_time -v --tb=short)",
      "Bash(venv/bin/python -m pytest test/performance/test_gap_analysis_v2_performance.py::TestGapAnalysisV2Performance::test_p50_response_time -v -s)",
      "Bash(rg:*)",
      "Bash(./test/scripts/demo_full_report.sh:*)",
      "Bash(# 保留最新的 10 個 gap_analysis_v2 日誌\nls -t test/logs/gap_analysis_v2_*.log 2>/dev/null | tail -n +11 | xargs -r rm -f || true\n\n# 保留每個 API-GAP 測試類型最新的 5 個檔案\nfor prefix in test_API-GAP-001-PT test_API-GAP-002-PT test_API-GAP-003-PT test_API-GAP-004-PT test_API-GAP-005-PT; do\n    ls -t test/logs/${prefix}_*.log 2>/dev/null | tail -n +6 | xargs -r rm -f || true\ndone\n\n# 保留每個 performance 測試類型最新的 5 個檔案  \nfor prefix in performance_API-GAP-001-PT performance_API-GAP-002-PT performance_API-GAP-003-PT performance_API-GAP-004-PT performance_API-GAP-005-PT; do\n    ls -t test/logs/${prefix}_*.json 2>/dev/null | tail -n +6 | xargs -r rm -f || true\ndone\n\necho \"\"清理完成\"\")",
      "Bash(# 清理其他舊檔案\n# 刪除超過 2 天的 error 日誌\nfind test/logs -name \"\"error_*.log\"\" -mtime +2 -delete 2>/dev/null || true\n\n# 刪除超過 2 天的 complete_test 日誌\nfind test/logs -name \"\"complete_test_*.log\"\" -mtime +2 -delete 2>/dev/null || true\n\n# 刪除超過 7 天的所有其他日誌\nfind test/logs -name \"\"*.log\"\" -mtime +7 -delete 2>/dev/null || true\n\n# 清理 diagnostic_runs 目錄中的舊檔案\nfind test/logs/diagnostic_runs -name \"\"*.log\"\" -mtime +2 -delete 2>/dev/null || true\n\necho \"\"額外清理完成\"\")",
      "Bash(./test/scripts/run_e2e_standalone.sh:*)",
      "Bash(ln:*)",
      "Bash(./test/scripts/run_index_cal_gap_analysis_unit_integration.sh:*)",
      "Bash(./test/scripts/run_index_cal_gap_analysis_real_api_perf_e2e.sh:*)",
      "Bash(git rm:*)",
      "Bash(host:*)",
      "Bash(./test/scripts/run_index_calculation_unit_integration.sh:*)",
      "Bash(sed:*)",
      "Bash(./test/scripts/run_index_calculation_real_api_perf_e2e.sh:*)",
      "Bash(test/scripts/run_index_cal_gap_analysis_real_api_perf_e2e.sh:*)",
      "Bash(venv/bin/python -B -m pytest test/integration/test_gap_analysis_v2_integration_complete.py::TestGapAnalysisV2IntegrationComplete::test_API_GAP_001_IT_api_endpoint_basic_functionality test/integration/test_gap_analysis_v2_integration_complete.py::TestGapAnalysisV2IntegrationComplete::test_API_GAP_004_IT_boundary_length_test -xvs)",
      "Bash(venv/bin/python -m pytest test/integration/test_error_handling_v2.py::TestErrorHandlingV2::test_API_GAP_018_IT_rate_limit_retry_timing -xvs)",
      "Bash(venv/bin/python -m pytest test/integration/test_error_handling_v2.py -v --tb=short)",
      "Bash(./test/scripts/run_health_keyword_unit_integration.sh:*)",
      "Bash(./test/scripts/run_health_keyword_real_api_perf_e2e.sh:*)",
      "Bash(venv/bin/python -m pytest:*)",
      "Bash(./test/scripts/run_health_keyword_real_api_perf.sh:*)"
    ],
    "deny": []
  }
}